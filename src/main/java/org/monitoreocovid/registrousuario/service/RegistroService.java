package org.monitoreocovid.registrousuario.service;

import org.monitoreocovid.registrousuario.dto.RegistroDTO;
import org.monitoreocovid.registrousuario.exception.RegistroAsistenteDuplicadoException;
import org.monitoreocovid.registrousuario.model.AsistenteEntity;
import org.monitoreocovid.registrousuario.model.AsistenteEventoEntity;
import org.monitoreocovid.registrousuario.model.EventoEntity;
import org.monitoreocovid.registrousuario.repository.AsistenteEventoRepository;
import org.monitoreocovid.registrousuario.repository.AsistenteRepository;
import org.monitoreocovid.registrousuario.repository.EventoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service()
public class RegistroService {

    @Autowired
    private AsistenteRepository asistenteRepository;
    @Autowired
    private EventoRepository eventoRepository;
    @Autowired
    private AsistenteEventoRepository asistenteEventoRepository;


    public AsistenteEntity guardarAsistente(final AsistenteEntity asistente) {
        return this.asistenteRepository.save(asistente);
    }

    public AsistenteEntity buscarAsistenteByIdentificacion(final String numeroIdentificacion) {
        final Optional<AsistenteEntity> asistente = this.asistenteRepository
                .findByNumeroIdentificacion(numeroIdentificacion);
        return asistente.isPresent() ? asistente.get() : null;
    }

    public AsistenteEventoEntity crearAsistenteEvento(final AsistenteEventoEntity asistenteEvento) {
        return this.asistenteEventoRepository.save(asistenteEvento);
    }

    public AsistenteEventoEntity buscarAsistenteEvento(final Integer idAsistente, final Integer idEvento) {
        final Optional<AsistenteEventoEntity> registro = this.asistenteEventoRepository.findByIdEventoAndIdAsistente(idAsistente, idEvento);
        return registro.isPresent() ? registro.get() : null;
    }

    public List<EventoEntity> listarEventos() {
        return this.eventoRepository.findAll();
    }

    @Transactional
    public RegistroDTO registrarAsistente(final RegistroDTO registro) {
        final AsistenteEntity buscarAsistente = this.buscarAsistenteByIdentificacion(registro.getNumeroIdentificacion());
        final AsistenteEntity asistente = buscarAsistente == null ? new AsistenteEntity() : buscarAsistente;
        asistente.setNombres(registro.getNombres());
        asistente.setApellidos(registro.getApellidos());
        asistente.setCorreo(registro.getCorreo());
        asistente.setNumeroCelular(registro.getNumeroCelular());
        asistente.setNumeroIdentificacion(registro.getNumeroIdentificacion());

        AsistenteEventoEntity registroEvento = this.buscarAsistenteEvento(asistente.getIdAsistente(), registro.getIdEvento());
        if (registroEvento != null) {
            throw new RegistroAsistenteDuplicadoException("Usuario ya registrado en el evento");
        }
        registroEvento = new AsistenteEventoEntity();
        registroEvento.setAsistente(asistente);
        final EventoEntity evento = new EventoEntity();
        evento.setIdEvento(registro.getIdEvento());
        registroEvento.setEvento(evento);
        registroEvento = this.crearAsistenteEvento(registroEvento);
        registro.setIdAsistenteEvento(registroEvento.getIdAsistenteEvento());
        return registro;
    }


    /*public RegistroDTO registrarAsistente(final RegistroDTO registro) {
        Connection connection = dataSource.getConnection(); // (1)
        try (connection) {
            connection.setAutoCommit(false); // (1)

            // execute some SQL that e.g.
            // inserts the user into the db and retrieves the autogenerated id
            // userDao.save(user); <(2)

            connection.commit(); // (1)
        } catch (SQLException e) {
            connection.rollback(); // (1)
        }
    }*/


}
